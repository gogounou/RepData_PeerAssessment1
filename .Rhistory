read.columns("~/Data Science/03 Getting and Cleaning Data/quiz1_data2.xlsx", startColumn = 7, endColumn = 15, startRow = 18, endRow = 23)
data <- read.columns("~/Data Science/03 Getting and Cleaning Data/quiz1_data2.xlsx", startColumn = 7, endColumn = 15, startRow = 18, endRow = 23)
?read.columns
?read.xlsx
xlsxData <- read.xlsx("~/Data Science/03 Getting and Cleaning Data/quiz1_data2.xlsx",1, startRow = 18, endRow = 23)
xlsxData
xlsxData <- xlsxData[,7:15]
xlsxData <- read.xlsx("~/Data Science/03 Getting and Cleaning Data/quiz1_data2.xlsx",1, startRow = 18, endRow = 23)
dat <- xlsxData[,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
?fread
??fread
?fread()
install.packages('data.table')
librarr('data.table')
library('data.table')
?fread
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "~/Data Science/03 Getting and Cleaning Data/quiz1_data4.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "~/Data Science/03 Getting and Cleaning Data/quiz1_data4.csv", method='curl')
DT <- fread("~/Data Science/03 Getting and Cleaning Data/quiz1_data4.csv")
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
tables()
r.version.string
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, straingsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
select?
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
seleect(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df("mydf")
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
?chain
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
cran
help
submit
submit()
submit()
submit()
submit()
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
rm(x)
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
X <- x[sample(1:5),];x$var2[c(1,3)=NA]
X <- x[sample(1:5),];x$var2[c(1,3)]=NA
x
X
x
x
X
X
x
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x <- x[sample(1:5),];x$var2[c(1,3)]=NA
x
x[(x$var2>8),]
x[which((x$var2>8),]
x[which(x$var2>8),]
x[which((x$var2>8)),]
x[which(x$var2>8),]
x[order(x$var1),]
x[order(x$var1, x$var3),]
x$var4 <- rnorm(5)
x
y <- cbind(x, rnorm(5))
y
y2 <- cbind(rnorm(5),x)
y2
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into=c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
?extract_numeric
submit()
?mutate
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status == "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status ="failed")
rbind_list(passed, failed)
sat
?contains
?select
?separate
submit()
submit()
submit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
View(students2)
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
student4
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_mo
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 13, minutes = 40)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library("nmle")
library("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
diet
summary(BodyWeight)
summary(Diet)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print p
print(p)
?par
?lpoints
?text
?axis
?points
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
setwd("~/DataScience/05_Reproducible_Research/RepData_PeerAssessment1")
## Load data
activity <- read.csv("activity.csv", header=TRUE, sep=",", na.strings="NA")
## Format data field
activity$date <- as.Date(activity$date)
## Total Steps Per Day
totalStepsDay <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=T)
## Calculate Mean & Median. Display results in body of Markup.
meanStepsDay <- mean(totalStepsDay$x, na.rm=T)
medianStepsDay <- median(totalStepsDay$x, na.rm=T)
## Average steps per interval
avgStepsInterval <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=T)
## Calculate interval with maximum steps, display in Markup
maxInterval <- avgStepsInterval[which.max(avgStepsInterval[,2]),1]
missing <- sum(is.na(activity))
## Create our new data set
activity.complete <- activity
## Create a vector of our missing values
na.steps <- is.na(activity.steps)
## Load data
activity <- read.csv("activity.csv", header=TRUE, sep=",", na.strings="NA")
## Format data field
activity$date <- as.Date(activity$date)
## Total Steps Per Day
totalStepsDay <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=T)
## Calculate Mean & Median. Display results in body of Markup.
meanStepsDay <- mean(totalStepsDay$x, na.rm=T)
medianStepsDay <- median(totalStepsDay$x, na.rm=T)
## Average steps per interval
avgStepsInterval <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=T)
## Calculate interval with maximum steps, display in Markup
maxInterval <- avgStepsInterval[which.max(avgStepsInterval[,2]),1]
missing <- sum(is.na(activity))
## Create our new data set
activity.complete <- activity
## Create a vector of our missing values
na.steps <- is.na(activity.steps)
## Load data
activity <- read.csv("activity.csv", header=TRUE, sep=",", na.strings="NA")
## Format data field
activity$date <- as.Date(activity$date)
## Total Steps Per Day
totalStepsDay <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=T)
## Calculate Mean & Median. Display results in body of Markup.
meanStepsDay <- mean(totalStepsDay$x, na.rm=T)
medianStepsDay <- median(totalStepsDay$x, na.rm=T)
## Average steps per interval
avgStepsInterval <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=T)
## Calculate interval with maximum steps, display in Markup
maxInterval <- avgStepsInterval[which.max(avgStepsInterval[,2]),1]
missing <- sum(is.na(activity))
## Create our new data set
activity.complete <- activity
## Create a vector of our missing values
na.steps <- is.na(activity$steps)
head(na.steps)
head(missing)
avgStepsInterval
activity.complete <- cbind(activity, avgStepsInterval[,2])
activity.complete
head(activity)
head(activity.complete)
head(avgStepsInterval)
activity.complete[288:300,]
activity.complete[576:590,]
activity.complete <- cbind(activity, avgStepsInterval[,2] AS avgSteps)
activity.complete[1:10,]
names(activity.complete)[4] <- c("avgSteps")
activity.complete[1:10,]
names(activity.complete)[,4] <- c("avgSteps")
names(activity.complete)[4] <- c("avgSteps")
names(activity.complete)[4] <- c("meanSteps")
activity.complete[1:10,]
activity.complete <- transform(activity.complete, steps = ifelse(is.na(steps), meanSteps, steps))
activity.complete[1:10,]
activity.complete[288:300,]
rm(activity.complete)
## Create our new data set, adding the mean steps matched by inetrval
activityComplete <- cbind(activity, meanStepsInterval[,2])
names(activityComplete)[4] <- c("meanSteps")
## Replace NA values with corresponding mean value
activityComplete <- transform(activityComplete, steps = ifelse(is.na(steps), meanSteps, steps))
## Load data
activity <- read.csv("activity.csv", header=TRUE, sep=",", na.strings="NA")
## Format data field
activity$date <- as.Date(activity$date)
## Total Steps Per Day
totalStepsDay <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=T)
## Calculate Mean & Median. Display results in body of Markup.
meanStepsDay <- mean(totalStepsDay$x, na.rm=T)
medianStepsDay <- median(totalStepsDay$x, na.rm=T)
## Average steps per interval
meanStepsInterval <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=T)
## Calculate interval with maximum steps, display in Markup
maxInterval <- meanStepsInterval[which.max(meanStepsInterval[,2]),1]
missing <- sum(is.na(activity))
## Create our new data set, adding the mean steps matched by inetrval
activityComplete <- cbind(activity, meanStepsInterval[,2])
names(activityComplete)[4] <- c("meanSteps")
## Replace NA values with corresponding mean value
activityComplete <- transform(activityComplete, steps = ifelse(is.na(steps), meanSteps, steps))
activityComplete[288:300,]
activity.complete[576:590,]
activityComplete[576:590,]
activityComplete$weekend <- (weekdays(df.clean$date) %in% c("Sunday", "Saturday"))
activityComplete$weekend <- (weekdays(activityComplete$date) %in% c("Sunday", "Saturday"))
head(activityComplete)
activityComplete$weekend <- weekdays(activityComplete$date)
head(activityComplete)
activityComplete$dayFactor <- as.factor(ifelse(activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
activityComplete$dayFactor <- as.factor(ifelse(activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday")
activityComplete$dayFactor <- ifelse(activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday"
activityComplete$dayFactor <- ifelse((activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday")
head(activityComplete)
activityComplete$day <- (weekdays(activityComplete$date)
)
head(activityComplete)
## Load data
activity <- read.csv("activity.csv", header=TRUE, sep=",", na.strings="NA")
## Format data field
activity$date <- as.Date(activity$date)
## Total Steps Per Day
totalStepsDay <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=T)
## Calculate Mean & Median. Display results in body of Markup.
meanStepsDay <- mean(totalStepsDay$x, na.rm=T)
medianStepsDay <- median(totalStepsDay$x, na.rm=T)
## Average steps per interval
meanStepsInterval <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=T)
## Calculate interval with maximum steps, display in Markup
maxInterval <- meanStepsInterval[which.max(meanStepsInterval[,2]),1]
missing <- sum(is.na(activity))
## Create our new data set, adding the mean steps matched by inetrval
activityComplete <- cbind(activity, meanStepsInterval[,2])
names(activityComplete)[4] <- c("meanSteps")
## Replace NA values with corresponding mean value
activityComplete <- transform(activityComplete, steps = ifelse(is.na(steps), meanSteps, steps))
activityComplete$day <- weekdays(activityComplete$date)
head(activityComplete)
activityComplete$dayFactor <- as.factor(ifelse(activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday")
activityComplete$dayFactor <- as.factor(ifelse(activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
activityComplete$dayFactor <- ifelse(activityComplete$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday")
activityComplete$dayFactor <- as.factor(ifelse(activityComplete$day %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
head(activityComplete)
weekdayActivity <- activityComplete[activityComplete$dayFactor="Weekday",]
weekdayActivity <- activityComplete[activityComplete$dayFactor=="Weekday",]
weekendActivity <- activityComplete[activityComplete$dayFactor=="Weekend",]
weekdayStepsInterval <- aggregate(weekdayActivity$steps, by=list(weekdayActivity$interval), FUN=mean, na.rm=T)
weekendStepsInterval <- aggregate(weekendActivity$steps, by=list(weekendActivity$interval), FUN=mean, na.rm=T)
